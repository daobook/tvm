# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-13 14:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:20004
msgid "Cross Compilation and RPC"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:20005
msgid ""
"**Author**: `Ziheng Jiang <https://github.com/ZihengJiang/>`_, `Lianmin "
"Zheng <https://github.com/merrymercy/>`_"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:20007
msgid ""
"This tutorial introduces cross compilation and remote device execution "
"with RPC in TVM."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:20010
msgid ""
"With cross compilation and RPC, you can **compile a program on your local"
" machine then run it on the remote device**. It is useful when the remote"
" device resource are limited, like Raspberry Pi and mobile platforms. In "
"this tutorial, we will use the Raspberry Pi for a CPU example and the "
"Firefly-RK3399 for an OpenCL example."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30002
msgid "Build TVM Runtime on Device"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30004
msgid "The first step is to build the TVM runtime on the remote device."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30010
msgid ""
"Since we do compilation on the local machine, the remote device is only "
"used for running the generated code. We only need to build the TVM "
"runtime on the remote device."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30014
#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30025
#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:40006
#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:40013
#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90022
#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160013
msgid ".. code-block:: bash"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30016
msgid ""
"git clone --recursive https://github.com/apache/tvm tvm   cd tvm   make "
"runtime -j2"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30020
msgid ""
"After building the runtime successfully, we need to set environment "
"variables in :code:`~/.bashrc` file. We can edit :code:`~/.bashrc` using "
":code:`vi ~/.bashrc` and add the line below (Assuming your TVM directory "
"is in :code:`~/tvm`):"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30027
msgid "export PYTHONPATH=$PYTHONPATH:~/tvm/python"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:30029
msgid "To update the environment variables, execute :code:`source ~/.bashrc`."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:40002
msgid "Set Up RPC Server on Device"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:40003
msgid ""
"To start an RPC server, run the following command on your remote device "
"(Which is Raspberry Pi in this example)."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:40010
msgid ""
"If you see the line below, it means the RPC server started successfully "
"on your device."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:50002
msgid "Declare and Cross Compile Kernel on Local Machine"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:50007
msgid "Here we will declare a simple kernel on the local machine:"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:70002
msgid ""
"Then we cross compile the kernel. The target should be 'llvm -mtriple"
"=armv7l-linux-gnueabihf' for Raspberry Pi 3B, but we use 'llvm' here to "
"make this tutorial runnable on our webpage building server. See the "
"detailed note in the following block."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90009
msgid ""
"Usually, you can query the target by running :code:`gcc -v` on your   "
"device, and looking for the line starting with :code:`Target:`   (Though "
"it may still be a loose configuration.)"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90013
msgid ""
"Besides :code:`-mtriple`, you can also set other compilation options   "
"like:"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90016
msgid ""
"-mcpu=<cpuname>   Specify a specific chip in the current architecture to "
"generate code for. By default this is inferred from the target triple and"
" autodetected to the current architecture."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90018
msgid ""
"-mattr=a1,+a2,-a3,...   Override or control specific attributes of the "
"target, such as whether SIMD operations are enabled or not. The default "
"set of attributes is set by the current CPU.   To get the list of "
"available attributes, you can do:"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:90026
msgid ""
"These options are consistent with `llc "
"<http://llvm.org/docs/CommandGuide/llc.html>`_.   It is recommended to "
"set target triple and feature set to contain specific   feature "
"available, so we can take full advantage of the features of the   board."
"   You can find more details about cross compilation attributes from   "
"`LLVM guide of cross compilation "
"<https://clang.llvm.org/docs/CrossCompilation.html>`_.</p></div>"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:100002
msgid "Run CPU Kernel Remotely by RPC"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:100003
msgid ""
"We show how to run the generated CPU kernel on the remote device. First "
"we obtain an RPC session from remote device."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:120002
msgid ""
"Upload the lib to the remote device, then invoke a device local compiler "
"to relink them. Now `func` is a remote module object."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:140002
msgid ""
"When you want to evaluate the performance of the kernel on the remote "
"device, it is important to avoid the overhead of network. "
":code:`time_evaluator` will returns a remote function that runs the "
"function over number times, measures the cost per run on the remote "
"device and returns the measured cost. Network overhead is excluded."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160002
msgid "Run OpenCL Kernel Remotely by RPC"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160003
msgid ""
"For remote OpenCL devices, the workflow is almost the same as above. You "
"can define the kernel, upload files, and run via RPC."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160010
msgid ""
"Also we need to build the runtime with OpenCL enabled on rk3399 board. In"
" the TVM    root directory, execute</p></div>"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160015
msgid ""
"cp cmake/config.cmake .    sed -i \"s/USE_OPENCL OFF/USE_OPENCL ON/\" "
"config.cmake    make runtime -j4"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:160019
msgid "The following function shows how we run an OpenCL kernel remotely"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:180002
msgid "Summary"
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:180003
msgid ""
"This tutorial provides a walk through of cross compilation and RPC "
"features in TVM."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:180006
msgid "Set up an RPC server on the remote device."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:180007
msgid ""
"Set up the target device configuration to cross compile the kernels on "
"the local machine."
msgstr ""

#: ../../user-guide/tutorial/cross_compilation_and_rpc.ipynb:180009
msgid "Upload and run the kernels remotely via the RPC API."
msgstr ""

