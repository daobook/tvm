# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 15:25+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_how_to_work_with_microtvm_micro_ethosu.py>` to "
"download the full example code"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:22
msgid "Running TVM on bare metal Arm(R) Cortex(R)-M55 CPU and Ethos(TM)-U55 NPU"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:23
msgid "**Author**: `Grant Watson <https://github.com/grant-arm>`_"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:26
msgid ""
"This section contains an example of how to use TVM to run a model on an "
"Arm(R) Cortex(R)-M55 CPU and Ethos(TM)-U55 NPU, using bare metal. The "
"Cortex(R)-M55 is a small, low-power CPU designed for use in embedded "
"devices. The Ethos(TM)-U55 is a microNPU, specifically designed to "
"accelerate ML inference in resource-constrained embedded devices."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:32
msgid ""
"In order to run the demo application without having access to a "
"Cortex(R)-M55 and Ethos(TM)-U55 development board, we will be running our"
" sample application on a Fixed Virtual Platform (FVP). The FVP based on "
"Arm(R) Corstone(TM)-300 software, models a hardware system containing a "
"Cortex(R)-M55 and Ethos(TM)-U55. It provides a programmer's view that is "
"suitable for software development."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:38
msgid ""
"In this tutorial, we will be compiling a MobileNet v1 model and "
"instructing TVM to offload operators to the Ethos(TM)-U55 where possible."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:44
msgid "Obtaining TVM"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:46
msgid ""
"To obtain TVM for you platform, please visit https://tlcpack.ai/ and "
"follow the instructions. Once TVM has been installed correctly, you "
"should have access to ``tvmc`` from the command line."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:50
msgid "Typing ``tvmc`` on the command line should display the following:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:75
msgid "Installing additional python dependencies"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:77
msgid ""
"In order to run the demo, you will need some additional python packages. "
"These can be installed by using the requirements.txt file below:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:80
msgid "requirements.txt"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:99
msgid ""
"These packages can be installed by running the following from the command"
" line:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:109
msgid "Obtaining the Model"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:111
msgid ""
"For this tutorial, we will be working with MobileNet v1. MobileNet v1 is "
"a convolutional neural network designed to classify images, that has been"
" optimized for edge devices. The model we will be using has been pre-"
"trained to classify images into one of 1001 different categories. The "
"network has an input image size of 224x224 so any input images will need "
"to be resized to those dimensions before being used."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:118
msgid "For this tutorial we will be using the model in Tflite format."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:132
msgid "Compiling the model for Arm(R) Cortex(R)-M55 CPU and Ethos(TM)-U55 NPU"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:134
msgid ""
"Once we've downloaded the MobileNet v1 model, the next step is to compile"
" it. To accomplish that, we are going to use ``tvmc compile``. The output"
" we get from the compilation process is a TAR package of the model "
"compiled to the Model Library Format (MLF) for our target platform. We "
"will be able to run that model on our target device using the TVM "
"runtime."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:155
msgid "Explanation of tvmc compile arguments:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:157
msgid ""
"``--target=\"ethos-u -accelerator_config=ethos-u55-256, c\"`` : offload "
"operators to the Ethos(TM)-U55 NPU where possible and fall back to using "
"generated C code on the Cortex(R)-M where an operator is not supported on"
" the NPU.."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:159
msgid "``--target-c-mcpu=cortex-m55`` : Cross-compile for the Cortex(R)-M55."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:161
msgid ""
"``--runtime=crt`` : Generate glue code to allow operators to work with C "
"runtime."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:163
msgid ""
"``--executor=aot`` : Use Ahead Of Time compiltaion instead of the Graph "
"Executor."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:165
msgid ""
"``--executor-aot-interface-api=c`` : Generate a C-style interface with "
"structures designed for integrating into C apps at the boundary."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:167
msgid "``--executor-aot-unpacked-api=1`` : Use the unpacked API internally."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:169
msgid ""
"``--pass-config tir.disable_vectorize=1`` : Disable vectorize since there"
" are no standard vectorized types in C."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:171
msgid ""
"``./mobilenet_v1_1.0_224_quant.tflite`` : The TFLite model that is being "
"compiled."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:173
msgid ""
"``--output-format=mlf`` : Output should be generated in the Model Library"
" Format."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:179
msgid "Extracting the generated code into the current directory"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:189
msgid "Getting ImageNet labels"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:191
msgid ""
"When running MobileNet v1 on an image, the result is an index in the "
"range 0 to 1000. In order to make our application a little more user "
"friendly, instead of just displaying the category index, we will display "
"the associated label. We will download these image labels into a text "
"file now and use a python script to include them in our C application "
"later."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:206
msgid "Getting the input image"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:208
msgid ""
"As input for this tutorial, we will use the image of a cat, but you can "
"substitute an image of your choosing."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:216
msgid ""
"We download the image into the build directory and we will use a python "
"script in the next step to convert the image into an array of bytes in a "
"C header file."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:227
msgid "Pre-processing the image"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:229
msgid "The following script will create 2 C header files in the src directory:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:231
msgid ""
"``inputs.h`` - The image supplied as an argument to the script will be "
"converted to an array of integers for input to our MobileNet v1 model."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:233
msgid ""
"``outputs.h`` - An integer array of zeroes will reserve 1001 integer "
"values for the output of inference."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:236
msgid "convert_image.py"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:298
#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:346
msgid "Run the script from the command line:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:307
msgid "Pre-processing the labels"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:309
msgid ""
"The following script will create a ``labels.h`` header file in the src "
"directory. The labels.txt file that we downloaded previously will be "
"turned into an array of strings. This array will be used to display the "
"label that our image has been classified as."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:314
msgid "convert_labels.py"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:355
msgid "Writing the demo application"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:357
msgid ""
"The following C application will run a single inference of the MobileNet "
"v1 model on the image that we downloaded and converted to an array of "
"integers previously. Since the model was compiled with a target of "
"\"ethos-u ...\", operators supported by the Ethos(TM)-U55 NPU will be "
"offloaded for acceleration. Once the application is built and run, our "
"test image should be correctly classied as a \"tabby\" and the result "
"should be displayed on the console. This file should be placed in "
"``./src``"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:365
msgid "demo.c"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:423
msgid ""
"In addition, you will need these header files from github in your "
"``./include`` directory:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:425
msgid ""
"`include files "
"<https://github.com/apache/tvm/tree/main/apps/microtvm/ethosu/include>`_"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:430
msgid "Creating the linker script"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:432
msgid ""
"We need to create a linker script that will be used when we build our "
"application in the following section. The linker script tells the linker "
"where everything should be placed in memory. The corstone300.ld linker "
"script below should be placed in your working directory."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:437
msgid ""
"An example linker script for the FVP can be found here `corstone300.ld "
"<https://github.com/apache/tvm/blob/main/apps/microtvm/ethosu/corstone300.ld>`_"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:444
msgid ""
"The code generated by TVM will place the model weights and the Arm(R) "
"Ethos(TM)-U55 command stream in a section named ``ethosu_scratch``. For a"
" model the size of MobileNet v1, the weights and command stream will not "
"fit into the limited SRAM available. For this reason it's important that "
"the linker script places the ``ethosu_scratch`` section into DRAM (DDR)."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:454
msgid ""
"Before building and running the application, you will need to update your"
" PATH environment variable to include the path to cmake 3.19.5 and the "
"FVP. For example if you've installed these in ``/opt/arm`` , then you "
"would do the following:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:459
msgid ""
"``export PATH=/opt/arm/FVP_Corstone_SSE-"
"300_Ethos-U55/models/Linux64_GCC-6.4:/opt/arm/cmake/bin:$PATH``"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:465
msgid "Building the demo application using make"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:467
msgid ""
"We can now build the demo application using make. The Makefile should be "
"placed in your working directory before running ``make`` on the command "
"line:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:470
msgid ""
"An example Makefile can be found here: `Makefile "
"<https://github.com/apache/tvm/blob/main/apps/microtvm/ethosu/Makefile>`_"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:476
msgid "Running the demo application"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:478
msgid ""
"Finally, we can run our demo appliction on the Fixed Virtual Platform "
"(FVP), by using the following command:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:490
msgid "You should see the following output displayed in your console window:"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:553
msgid ""
"You should see near the end of the output that the image has been "
"correctly classified as 'tabby'."
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:569
msgid ":download:`Download Python source code: micro_ethosu.py <micro_ethosu.py>`"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:575
msgid ""
":download:`Download Jupyter notebook: micro_ethosu.ipynb "
"<micro_ethosu.ipynb>`"
msgstr ""

#: ../../docs/how_to/work_with_microtvm/micro_ethosu.rst:582
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

