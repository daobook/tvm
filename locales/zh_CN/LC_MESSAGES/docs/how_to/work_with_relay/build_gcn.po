# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-13 14:28+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_how_to_work_with_relay_build_gcn.py>`"
" to download the full example code"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:22
msgid "Building a Graph Convolutional Network"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:23
msgid ""
"**Author**: `Yulun Yao <https://yulunyao.io/>`_,             `Chien-Yu "
"Lin <https://homes.cs.washington.edu/~cyulin/>`_"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:25
msgid ""
"This article is an introductory tutorial to build a Graph Convolutional "
"Network (GCN) with Relay. In this tutorial, we will run our GCN on Cora "
"dataset to demonstrate. Cora dataset is a common benchmark for Graph "
"Neural Networks (GNN) and frameworks that support GNN training and "
"inference. We directly load the dataset from DGL library to do the apples"
" to apples comparison against DGL."
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:30
msgid ""
"Please refer to DGL doc for DGL installation at "
"https://docs.dgl.ai/install/index.html."
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:33
msgid ""
"Please refer to PyTorch guide for PyTorch installation at "
"https://pytorch.org/get-started/locally/."
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:39
msgid "Define GCN in DGL with PyTorch backend"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:41
msgid ""
"DGL example: https://github.com/dmlc/dgl/tree/master/examples/pytorch/gcn"
" This part reuses the code from the above example."
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:81
msgid "Define the functions to load dataset and evaluate accuracy"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:82
msgid ""
"You may substitute this part with your own dataset, here we load data "
"from DGL"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:117
msgid "Load the data and set up model parameters"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:154
msgid "Set up the DGL-PyTorch model and get the golden results"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:156
msgid ""
"The weights are trained with "
"https://github.com/dmlc/dgl/blob/master/examples/pytorch/gcn/train.py"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:182
msgid "Run the DGL model and test for accuracy"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:201
msgid "Define Graph Convolution Layer in Relay"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:202
msgid ""
"To run GCN on TVM, we first need to implement Graph Convolution Layer. "
"You may refer to "
"https://github.com/dmlc/dgl/blob/master/python/dgl/nn/mxnet/conv/graphconv.py"
" for a GraphConv Layer implemented in DGL with MXNet Backend"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:205
msgid ""
"The layer is defined with below operations, note that we apply two "
"transposes to keep adjacency matrix on right hand side of sparse_dense "
"operator, this method is temporary and will be updated in next few weeks "
"when we have sparse matrix transpose and support for left sparse "
"operator."
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:208
msgid ""
"\\mbox{GraphConv}(A, H, W)   = A * H * W\n"
"                            = ((H * W)^t * A^t)^t\n"
"                            = ((W^t * H^t) * A^t)^t"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:280
msgid "Prepare the parameters needed in the GraphConv layers"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:324
msgid "Put layers together"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:373
msgid "Compile and run with TVM"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:375
msgid "Export the weigths from PyTorch model to Python Dict"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:408
msgid "Run the TVM model, test for accuracy and verify with DGL"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:442
msgid ":download:`Download Python source code: build_gcn.py <build_gcn.py>`"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:448
msgid ":download:`Download Jupyter notebook: build_gcn.ipynb <build_gcn.ipynb>`"
msgstr ""

#: ../../user-guide/how_to/work_with_relay/build_gcn.rst:455
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

