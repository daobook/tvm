# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 15:25+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../refs/_ffi/registry.rst:3
msgid "``_ffi.registry``"
msgstr ""

#: of tvm._ffi.registry:1
msgid "FFI registry to register function and objects."
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:1
msgid "Extract the extension PackedFuncs from a C module."
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs tvm._ffi.registry.get_global_func
#: tvm._ffi.registry.register_extension tvm._ffi.registry.register_func
#: tvm._ffi.registry.register_object tvm._ffi.registry.remove_global_func
msgid "参数"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:3
msgid "a ctypes that takes signature of TVMExtensionDeclarer"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs tvm._ffi.registry.get_global_func
#: tvm._ffi.registry.list_global_func_names
#: tvm._ffi.registry.register_extension tvm._ffi.registry.register_func
msgid "返回"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:6
msgid "**fdict** -- The extracted functions"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs tvm._ffi.registry.get_global_func
#: tvm._ffi.registry.list_global_func_names
#: tvm._ffi.registry.register_extension tvm._ffi.registry.register_func
msgid "返回类型"
msgstr ""

#: of tvm._ffi.registry.get_global_func:1
msgid "Get a global function by name"
msgstr ""

#: of tvm._ffi.registry.get_global_func:3
#: tvm._ffi.registry.remove_global_func:3
msgid "The name of the global function"
msgstr ""

#: of tvm._ffi.registry.get_global_func:5
msgid "Whether allow missing function or raise an error."
msgstr ""

#: of tvm._ffi.registry.get_global_func:8
msgid "**func** -- The function to be returned, None if function is missing."
msgstr ""

#: of tvm._ffi.registry.list_global_func_names:1
msgid "Get list of global functions registered."
msgstr ""

#: of tvm._ffi.registry.list_global_func_names:3
msgid "**names** -- List of global functions names."
msgstr ""

#: of tvm._ffi.registry.register_extension:1
msgid "Register a extension class to TVM."
msgstr ""

#: of tvm._ffi.registry.register_extension:3
msgid ""
"After the class is registered, the class will be able to directly pass as"
" Function argument generated by TVM."
msgstr ""

#: of tvm._ffi.registry.register_extension:6
msgid "The class object to be registered as extension."
msgstr ""

#: of tvm._ffi.registry.register_extension:8
msgid "The creation function to create a class object given handle value."
msgstr ""

#: of tvm._ffi.registry.register_extension:13
msgid "The registered class is requires one property: _tvm_handle."
msgstr ""

#: of tvm._ffi.registry.register_extension:15
msgid ""
"If the registered class is a subclass of NDArray, it is required to have "
"a class attribute _array_type_code. Otherwise, it is required to have a "
"class attribute _tvm_tcode."
msgstr ""

#: of tvm._ffi.registry.register_extension:19
msgid "```_tvm_handle``` returns integer represents the address of the handle."
msgstr ""

#: of tvm._ffi.registry.register_extension:20
msgid ""
"```_tvm_tcode``` or ```_array_type_code``` gives integer represents type "
"code of the class."
msgstr ""

#: of tvm._ffi.registry.register_extension:23
msgid "**cls** -- The class being registered."
msgstr ""

#: of tvm._ffi.registry.register_extension:27
msgid "示例"
msgstr ""

#: of tvm._ffi.registry.register_extension:28
msgid ""
"The following code registers user defined class MyTensor to be DLTensor "
"compatible."
msgstr ""

#: of tvm._ffi.registry.register_func:1
msgid "Register global function"
msgstr ""

#: of tvm._ffi.registry.register_func:3
msgid "The function name"
msgstr ""

#: of tvm._ffi.registry.register_func:5
msgid "The function to be registered."
msgstr ""

#: of tvm._ffi.registry.register_func:7
msgid "Whether override existing entry."
msgstr ""

#: of tvm._ffi.registry.register_func:10
msgid "**fregister** -- Register function if f is not specified."
msgstr ""

#: of tvm._ffi.registry.register_func:14 tvm._ffi.registry.register_object:7
msgid "实际案例"
msgstr ""

#: of tvm._ffi.registry.register_func:15
msgid ""
"The following code registers my_packed_func as global function. Note that"
" we simply get it back from global function table to invoke it from "
"python side. However, we can also invoke the same function from C++ "
"backend, or in the compiled TVM code."
msgstr ""

#: of tvm._ffi.registry.register_object:1
msgid "register object type."
msgstr ""

#: of tvm._ffi.registry.register_object:3
msgid "The type key of the node"
msgstr ""

#: of tvm._ffi.registry.register_object:8
msgid "The following code registers MyObject using type key \"test.MyObject\""
msgstr ""

#: of tvm._ffi.registry.remove_global_func:1
msgid "Remove a global function by name"
msgstr ""

#~ msgid "`_ffi.registry`"
#~ msgstr ""

