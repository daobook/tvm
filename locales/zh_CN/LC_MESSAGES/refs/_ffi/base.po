# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-06 15:25+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../refs/_ffi/base.rst:3
msgid "``_ffi.base``"
msgstr ""

#: of tvm._ffi.base:1
msgid "Base library for TVM FFI."
msgstr "TVM FFI 的基础库。"

#: of tvm._ffi.base.TVMError:1
msgid "Default error thrown by TVM functions."
msgstr "由 TVM 函数抛出的默认错误。"

#: of tvm._ffi.base.TVMError:3
msgid "TVMError will be raised if you do not give any error type specification,"
msgstr "如果你没有给出任何错误类型的说明，TVMError 将被触发。"

#: of tvm._ffi.base.c2pyerror:1
msgid "Translate C API error message to python style."
msgstr "将 C 语言 API 错误信息翻译成 Python 风格。"

#: of tvm._ffi.base.c2pyerror tvm._ffi.base.c_array tvm._ffi.base.check_call
#: tvm._ffi.base.decorate tvm._ffi.base.py2cerror tvm._ffi.base.register_error
msgid "参数"
msgstr ""

#: of tvm._ffi.base.c2pyerror:3 tvm._ffi.base.py2cerror:3
msgid "The error message."
msgstr "错误信息。"

#: of tvm._ffi.base.c2pyerror tvm._ffi.base.c_array tvm._ffi.base.c_str
#: tvm._ffi.base.get_last_ffi_error tvm._ffi.base.py2cerror
#: tvm._ffi.base.register_error
msgid "返回"
msgstr ""

#: of tvm._ffi.base.c2pyerror:6
msgid ""
"* **new_msg** (*str*) -- Translated message. * **err_type** (*str*) -- "
"Detected error type."
msgstr "* **new_msg** (*str*) -- 翻译的信息。**err_type** (*str*) -- 检测到的错误类型。"

#: of tvm._ffi.base.c2pyerror:6
msgid "**new_msg** (*str*) -- Translated message."
msgstr ""

#: of tvm._ffi.base.c2pyerror:7
msgid "**err_type** (*str*) -- Detected error type."
msgstr ""

#: of tvm._ffi.base.c_array:1
msgid "Create ctypes array from a python array"
msgstr ""

#: of tvm._ffi.base.c_array:3
msgid "data type of the array we want to convert to"
msgstr ""

#: of tvm._ffi.base.c_array:5
msgid "data content"
msgstr ""

#: of tvm._ffi.base.c_array:8
msgid "**out** -- Created ctypes array"
msgstr ""

#: of tvm._ffi.base.c_array tvm._ffi.base.c_str
#: tvm._ffi.base.get_last_ffi_error tvm._ffi.base.py2cerror
#: tvm._ffi.base.register_error
msgid "返回类型"
msgstr ""

#: of tvm._ffi.base.c_str:1
msgid ""
"Create ctypes char * from a python string :param string: python string "
":type string: string type"
msgstr ""

#: of tvm._ffi.base.c_str:5
msgid "**str** -- A char pointer that can be passed to C API"
msgstr ""

#: of tvm._ffi.base.check_call:1
msgid "Check the return value of C API call"
msgstr ""

#: of tvm._ffi.base.check_call:3
msgid ""
"This function will raise exception when error occurs. Wrap every API call"
" with this function"
msgstr ""

#: of tvm._ffi.base.check_call:6
msgid "return value from API calls"
msgstr ""

#: of tvm._ffi.base.decorate:1
msgid "A wrapper call of decorator package, differs to call time"
msgstr ""

#: of tvm._ffi.base.decorate:3
msgid "The original function"
msgstr ""

#: of tvm._ffi.base.decorate:5
msgid "The wrapped function"
msgstr ""

#: of tvm._ffi.base.get_last_ffi_error:1
msgid "Create error object given result of TVMGetLastError."
msgstr ""

#: of tvm._ffi.base.get_last_ffi_error:3
msgid "**err** -- The error object based on the err_msg"
msgstr ""

#: of tvm._ffi.base.py2cerror:1
msgid "Translate python style error message to C style."
msgstr ""

#: of tvm._ffi.base.py2cerror:6
msgid "**new_msg** -- Translated message."
msgstr ""

#: of tvm._ffi.base.register_error:1
msgid "Register an error class so it can be recognized by the ffi error handler."
msgstr ""

#: of tvm._ffi.base.register_error:3
msgid "The name of the error function."
msgstr ""

#: of tvm._ffi.base.register_error:5
msgid "The function to create the class"
msgstr ""

#: of tvm._ffi.base.register_error:8
msgid "**fregister** -- Register function if f is not specified."
msgstr ""

#: of tvm._ffi.base.register_error:12
msgid "实际案例"
msgstr ""

#~ msgid "`_ffi.base`"
#~ msgstr ""

