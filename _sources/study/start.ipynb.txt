{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TVM 入门指南\n",
    "\n",
    "## 前端导入模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<module 'tvm' from '/media/pc/data/4tb/lxw/study/tvm/python/tvm/__init__.py'>\n",
      "<module 'vta' from '/media/pc/data/4tb/lxw/study/tvm/vta/python/vta/__init__.py'>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "One or more operators have not been tuned. Please tune your model for better performance. Use DEBUG logging level to see more details.\n"
     ]
    }
   ],
   "source": [
    "from env import tvm\n",
    "import onnx\n",
    "from utils.loader import img_data\n",
    "\n",
    "model_path = '../../models/resnet50-v2-7.onnx'\n",
    "onnx_model = onnx.load(model_path)\n",
    "\n",
    "from tvm import relay\n",
    "from tvm.contrib import graph_executor\n",
    "\n",
    "target = \"llvm\"\n",
    "input_name = \"data\"\n",
    "shape_dict = {input_name: img_data.shape}\n",
    "\n",
    "mod, params = relay.frontend.from_onnx(onnx_model, shape_dict)\n",
    "\n",
    "with tvm.transform.PassContext(opt_level=3):\n",
    "    lib = relay.build(mod, target=target, params=params)\n",
    "\n",
    "dev = tvm.device(str(target), 0)\n",
    "module = graph_executor.GraphModule(lib[\"default\"](dev))\n",
    "\n",
    "dtype = \"float32\"\n",
    "module.set_input(input_name, img_data)\n",
    "module.run()\n",
    "output_shape = (1, 1000)\n",
    "tvm_output = module.get_output(0, tvm.nd.empty(output_shape)).numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tvm.auto_scheduler as auto_scheduler\n",
    "from tvm.autotvm.tuner import XGBTuner\n",
    "from tvm import autotvm\n",
    "\n",
    "number = 10\n",
    "repeat = 1\n",
    "min_repeat_ms = 0  # since we're tuning on a CPU, can be set to 0\n",
    "timeout = 10  # in seconds\n",
    "\n",
    "# create a TVM runner\n",
    "runner = autotvm.LocalRunner(\n",
    "    number=number,\n",
    "    repeat=repeat,\n",
    "    timeout=timeout,\n",
    "    min_repeat_ms=min_repeat_ms,\n",
    "    enable_cpu_cache_flush=False,\n",
    ")\n",
    "\n",
    "tuning_option = {\n",
    "    \"tuner\": \"xgb\",\n",
    "    \"trials\": 10,\n",
    "    \"early_stopping\": 100,\n",
    "    \"measure_option\": autotvm.measure_option(\n",
    "        builder=autotvm.LocalBuilder(build_func=\"default\"), runner=runner\n",
    "    ),\n",
    "    \"tuning_records\": \"resnet-50-v2-autotuning.json\",\n",
    "}\n",
    "\n",
    "# 首先从 onnx 模型中提取任务\n",
    "tasks = autotvm.task.extract_from_program(mod[\"main\"], target=target, params=params)\n",
    "\n",
    "# 按顺序调优提取的任务\n",
    "for i, task in enumerate(tasks):\n",
    "    # prefix = \"[Task %2d/%2d] \" % (i + 1, len(tasks))\n",
    "    # tuner_obj = XGBTuner(task, loss_type=\"rank\")\n",
    "    # tuner_obj.tune(\n",
    "    #     n_trial=min(tuning_option[\"trials\"], len(task.config_space)),\n",
    "    #     early_stopping=tuning_option[\"early_stopping\"],\n",
    "    #     measure_option=tuning_option[\"measure_option\"],\n",
    "    #     callbacks=[\n",
    "    #         autotvm.callback.progress_bar(tuning_option[\"trials\"], prefix=prefix),\n",
    "    #         autotvm.callback.log_to_file(tuning_option[\"tuning_records\"]),\n",
    "    #     ]\n",
    "    # )\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tvm.rpc.tracker import Tracker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pc/vscodex/tvm38/bin/python: Error while finding module specification for 'tvm.exec.popen_worker' (ModuleNotFoundError: No module named 'tvm')\n"
     ]
    },
    {
     "ename": "ChildProcessError",
     "evalue": "Subprocess terminated",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mChildProcessError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m/media/pc/data/4tb/lxw/study/tvm/xin/study/start.ipynb Cell 6'\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> <a href='vscode-notebook-cell://ssh-remote%2B10.16.11.3/media/pc/data/4tb/lxw/study/tvm/xin/study/start.ipynb#ch0000013vscode-remote?line=0'>1</a>\u001b[0m tracker \u001b[39m=\u001b[39m Tracker(port\u001b[39m=\u001b[39;49m\u001b[39m9000\u001b[39;49m, port_end\u001b[39m=\u001b[39;49m\u001b[39m10000\u001b[39;49m, silent\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m)\n",
      "File \u001b[0;32m/media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py:451\u001b[0m, in \u001b[0;36mTracker.__init__\u001b[0;34m(self, host, port, port_end, silent)\u001b[0m\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=440'>441</a>\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mproc\u001b[39m.\u001b[39msend(\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=441'>442</a>\u001b[0m     _popen_start_tracker_server,\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=442'>443</a>\u001b[0m     [\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=447'>448</a>\u001b[0m     ],\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=448'>449</a>\u001b[0m )\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=449'>450</a>\u001b[0m \u001b[39m# receive the port\u001b[39;00m\n\u001b[0;32m--> <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=450'>451</a>\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mport, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstop_key \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mproc\u001b[39m.\u001b[39;49mrecv()\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/rpc/tracker.py?line=451'>452</a>\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mhost \u001b[39m=\u001b[39m host\n",
      "File \u001b[0;32m/media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py:260\u001b[0m, in \u001b[0;36mPopenWorker.recv\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py?line=256'>257</a>\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_child_process_error()\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py?line=258'>259</a>\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mlen\u001b[39m(len_data) \u001b[39m==\u001b[39m \u001b[39m0\u001b[39m:\n\u001b[0;32m--> <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py?line=259'>260</a>\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_child_process_error()\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py?line=261'>262</a>\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[1;32m    <a href='file:///media/pc/data/4tb/lxw/study/tvm/python/tvm/contrib/popen_pool.py?line=262'>263</a>\u001b[0m     recv_bytes \u001b[39m=\u001b[39m struct\u001b[39m.\u001b[39munpack(\u001b[39m\"\u001b[39m\u001b[39m<i\u001b[39m\u001b[39m\"\u001b[39m, len_data)[\u001b[39m0\u001b[39m]\n",
      "\u001b[0;31mChildProcessError\u001b[0m: Subprocess terminated"
     ]
    }
   ],
   "source": [
    "tracker = Tracker(port=9000, port_end=10000, silent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "6ee5142ba8a2589df39b0df03e82f50c3ae535c49aaf7d83abad1a0d572c7e37"
  },
  "kernelspec": {
   "display_name": "Python 3.10.4 ('tvm-test')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
